{"filter":false,"title":"faiss_indexer.py","tooltip":"/education_chatbot/faiss_indexer.py","undoManager":{"mark":27,"position":27,"stack":[[{"start":{"row":0,"column":0},"end":{"row":87,"column":0},"action":"remove","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\")","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\"))","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPT 4.0oでの応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPT 4.0oを使って応答を生成","    response = openai.ChatCompletion.create(","    model=OPENAI_API_MODEL,","    temperature=OPENAI_API_TEMPERATURE,","    messages=[","        {","            \"role\": \"system\",","            \"content\": (","                # 学生の質問やコメントに対する基本的な役割とアプローチ","                \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                \"感謝の言葉などは必要ありません\"","                ","                # 講義の範囲を超えた質問に対する対応方法","                \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                \"感想が講義の範囲を超えている、また資料に直接関係のない場合は、「その感想は講義の範囲を超えているため、回答できません」と答えてください。\"","        ","                # 授業コメントへの反応の方針","                \"授業に関するコメントに対しては、その内容に基づいて適切に反応し、学生が持っている印象や興味を引き出す回答を提供してください。\"","                \"回答は、学生の学びや関心を深めるために、教育的かつ励ましのある内容であることが望ましいです。\"","        ","                # 不確定な情報に対する慎重な対応","                \"原則として提供した資料に基づいて回答してください．回答に必要な関連情報が不十分な場合には、ソフトウェア工学に関する一般的な知識を用いて補完しても構いません。\"","                \"推測に基づく不確定な情報の提供は行わないでください。\"","        ),","    },","        {","            \"role\": \"user\",","            \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\"","        }","    ]",")","","    answer = response['choices'][0]['message']['content'].strip()","    return answer","","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)","",""],"id":55},{"start":{"row":0,"column":0},"end":{"row":77,"column":0},"action":"insert","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\")","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\"))","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPT応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPTを使って応答を生成","    try:","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            temperature=OPENAI_API_TEMPERATURE,","            messages=[","                {","                    \"role\": \"system\",","                    \"content\": (","                        \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                        \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                        \"感謝の言葉などは必要ありません。\"","                        \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                        \"授業に関するコメントには、学生が持っている印象や興味を引き出す回答を提供してください。\"","                        \"不確定な情報の提供は行わないでください。\"","                    ),","                },","                {","                    \"role\": \"user\",","                    \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\",","                },","            ],","        )","        answer = response['choices'][0]['message']['content'].strip()","        return answer","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""]}],[{"start":{"row":0,"column":0},"end":{"row":77,"column":0},"action":"remove","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\")","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\"))","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPT応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPTを使って応答を生成","    try:","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            temperature=OPENAI_API_TEMPERATURE,","            messages=[","                {","                    \"role\": \"system\",","                    \"content\": (","                        \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                        \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                        \"感謝の言葉などは必要ありません。\"","                        \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                        \"授業に関するコメントには、学生が持っている印象や興味を引き出す回答を提供してください。\"","                        \"不確定な情報の提供は行わないでください。\"","                    ),","                },","                {","                    \"role\": \"user\",","                    \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\",","                },","            ],","        )","        answer = response['choices'][0]['message']['content'].strip()","        return answer","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""],"id":56},{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"insert","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\", \"gpt-3.5-turbo\")  # デフォルト値を設定","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\", 0.7))  # デフォルト値を設定","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    try:","        embeddings = OpenAIEmbeddings(api_key=openai.api_key)","        return FAISS.from_documents(texts, embeddings)","    except Exception as e:","        raise RuntimeError(f\"FAISSインデックスの作成に失敗しました: {str(e)}\")","","# クエリ検索とChatGPT応答生成","def search_index(faiss_index, query):","    try:","        # FAISSインデックスで検索","        results = faiss_index.similarity_search(query)","        content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","        # ChatGPTを使って応答を生成","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            temperature=OPENAI_API_TEMPERATURE,","            messages=[","                {","                    \"role\": \"system\",","                    \"content\": (","                        \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                        \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                        \"感謝の言葉などは必要ありません。\"","                        \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                        \"授業に関するコメントには、学生が持っている印象や興味を引き出す回答を提供してください。\"","                        \"不確定な情報の提供は行わないでください。\"","                    ),","                },","                {","                    \"role\": \"user\",","                    \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\",","                },","            ],","        )","        return response['choices'][0]['message']['content'].strip()","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in",""]}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"remove","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\", \"gpt-3.5-turbo\")  # デフォルト値を設定","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\", 0.7))  # デフォルト値を設定","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    try:","        embeddings = OpenAIEmbeddings(api_key=openai.api_key)","        return FAISS.from_documents(texts, embeddings)","    except Exception as e:","        raise RuntimeError(f\"FAISSインデックスの作成に失敗しました: {str(e)}\")","","# クエリ検索とChatGPT応答生成","def search_index(faiss_index, query):","    try:","        # FAISSインデックスで検索","        results = faiss_index.similarity_search(query)","        content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","        # ChatGPTを使って応答を生成","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            temperature=OPENAI_API_TEMPERATURE,","            messages=[","                {","                    \"role\": \"system\",","                    \"content\": (","                        \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                        \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                        \"感謝の言葉などは必要ありません。\"","                        \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                        \"授業に関するコメントには、学生が持っている印象や興味を引き出す回答を提供してください。\"","                        \"不確定な情報の提供は行わないでください。\"","                    ),","                },","                {","                    \"role\": \"user\",","                    \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\",","                },","            ],","        )","        return response['choices'][0]['message']['content'].strip()","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in",""],"id":57},{"start":{"row":0,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\", \"gpt-3.5-turbo\")  # デフォルト値を設定","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\", 0.7))  # デフォルト値を設定","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    try:","        embeddings = OpenAIEmbeddings(api_key=openai.api_key)","        return FAISS.from_documents(texts, embeddings)","    except Exception as e:","        raise RuntimeError(f\"FAISSインデックスの作成に失敗しました: {str(e)}\")","","# クエリ検索とChatGPT応答生成","def search_index(faiss_index, query):","    try:","        # FAISSインデックスで検索","        results = faiss_index.similarity_search(query)","        content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","        # ChatGPTを使って応答を生成","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            temperature=OPENAI_API_TEMPERATURE,","            messages=[","                {","                    \"role\": \"system\",","                    \"content\": (","                        \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                        \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                        \"感謝の言葉などは必要ありません。\"","                        \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                        \"授業に関するコメントには、学生が持っている印象や興味を引き出す回答を提供してください。\"","                        \"不確定な情報の提供は行わないでください。\"","                    ),","                },","                {","                    \"role\": \"user\",","                    \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\",","                },","            ],","        )","        return response['choices'][0]['message']['content'].strip()","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""]}],[{"start":{"row":39,"column":97},"end":{"row":40,"column":0},"action":"insert","lines":["",""],"id":58},{"start":{"row":40,"column":0},"end":{"row":40,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":40,"column":24},"end":{"row":41,"column":0},"action":"insert","lines":["\"講義資料に基づいて回答を行い、必要に応じて参考例を補足情報として含めてください。\"",""],"id":59}],[{"start":{"row":40,"column":66},"end":{"row":41,"column":0},"action":"remove","lines":["",""],"id":60}],[{"start":{"row":40,"column":24},"end":{"row":40,"column":66},"action":"remove","lines":["\"講義資料に基づいて回答を行い、必要に応じて参考例を補足情報として含めてください。\""],"id":61},{"start":{"row":40,"column":20},"end":{"row":40,"column":24},"action":"remove","lines":["    "]},{"start":{"row":40,"column":16},"end":{"row":40,"column":20},"action":"remove","lines":["    "]},{"start":{"row":40,"column":12},"end":{"row":40,"column":16},"action":"remove","lines":["    "]},{"start":{"row":40,"column":8},"end":{"row":40,"column":12},"action":"remove","lines":["    "]},{"start":{"row":40,"column":4},"end":{"row":40,"column":8},"action":"remove","lines":["    "]},{"start":{"row":40,"column":0},"end":{"row":40,"column":4},"action":"remove","lines":["    "]},{"start":{"row":39,"column":97},"end":{"row":40,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":79,"column":0},"action":"remove","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\", \"gpt-3.5-turbo\")  # デフォルト値を設定","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\", 0.7))  # デフォルト値を設定","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    try:","        embeddings = OpenAIEmbeddings(api_key=openai.api_key)","        return FAISS.from_documents(texts, embeddings)","    except Exception as e:","        raise RuntimeError(f\"FAISSインデックスの作成に失敗しました: {str(e)}\")","","# クエリ検索とChatGPT応答生成","def search_index(faiss_index, query):","    try:","        # FAISSインデックスで検索","        results = faiss_index.similarity_search(query)","        content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","        # ChatGPTを使って応答を生成","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            temperature=OPENAI_API_TEMPERATURE,","            messages=[","                {","                    \"role\": \"system\",","                    \"content\": (","                        \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                        \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                        \"感謝の言葉などは必要ありません。\"","                        \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                        \"授業に関するコメントには、学生が持っている印象や興味を引き出す回答を提供してください。\"","                        \"不確定な情報の提供は行わないでください。\"","                    ),","                },","                {","                    \"role\": \"user\",","                    \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\",","                },","            ],","        )","        return response['choices'][0]['message']['content'].strip()","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""],"id":62},{"start":{"row":0,"column":0},"end":{"row":64,"column":0},"action":"insert","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\", \"gpt-3.5-turbo\")  # デフォルトモデル","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\", \"0.7\"))  # デフォルト温度","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPTでの応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPTで応答を生成","    try:","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            messages=[","                {\"role\": \"system\", \"content\": \"あなたは学生の質問に答えるアシスタントです。\"},","                {\"role\": \"user\", \"content\": f\"以下の資料に基づいて回答してください:\\n\\n{content}\\n\\n質問: {query}\"}","            ],","            temperature=OPENAI_API_TEMPERATURE","        )","        answer = response['choices'][0]['message']['content'].strip()","        return answer","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""]}],[{"start":{"row":0,"column":0},"end":{"row":64,"column":0},"action":"remove","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\", \"gpt-3.5-turbo\")  # デフォルトモデル","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\", \"0.7\"))  # デフォルト温度","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPTでの応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPTで応答を生成","    try:","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            messages=[","                {\"role\": \"system\", \"content\": \"あなたは学生の質問に答えるアシスタントです。\"},","                {\"role\": \"user\", \"content\": f\"以下の資料に基づいて回答してください:\\n\\n{content}\\n\\n質問: {query}\"}","            ],","            temperature=OPENAI_API_TEMPERATURE","        )","        answer = response['choices'][0]['message']['content'].strip()","        return answer","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""],"id":63},{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\", \"gpt-3.5-turbo\")  # デフォルトモデル","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\", \"0.7\"))  # デフォルト温度","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPTでの応答生成","def search_index(faiss_index, query):","    try:","        # FAISSインデックスで検索","        results = faiss_index.similarity_search(query)","        content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","        # ChatGPTで応答を生成","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            messages=[","                {\"role\": \"system\", \"content\": \"あなたは学生の質問に答えるアシスタントです。\"},","                {\"role\": \"user\", \"content\": f\"以下の資料に基づいて回答してください:\\n\\n{content}\\n\\n質問: {query}\"}","            ],","            temperature=OPENAI_API_TEMPERATURE","        )","        answer = response[\"choices\"][0][\"message\"][\"content\"].strip()","        return answer","    except openai.error.OpenAIError as e:","        return f\"OpenAI APIエラーが発生しました: {str(e)}\"","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    try:","        for filename in os.listdir(folder_path):","            file_path = os.path.join(folder_path, filename)","            if filename.endswith(\".pdf\"):","                documents = load_pdf(file_path)","            elif filename.endswith(\".txt\"):","                documents = load_text(file_path)","            elif filename.endswith(\".docx\"):  # Wordファイル対応","                documents = load_docx(file_path)","            else:","                continue","","            texts = split_text(documents)","            all_texts.extend(texts)","","        if not all_texts:","            raise ValueError(\"フォルダ内に有効なテキストが見つかりませんでした。\")","","        # return_documentsがTrueの場合、ドキュメントのリストを返す","        if return_documents:","            return all_texts","        # デフォルトではインデックスを返す","        return create_faiss_index(all_texts)","","    except Exception as e:","        print(f\"エラーが発生しました: {e}\")","        return None",""]}],[{"start":{"row":39,"column":0},"end":{"row":42,"column":38},"action":"remove","lines":["    except openai.error.OpenAIError as e:","        return f\"OpenAI APIエラーが発生しました: {str(e)}\"","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\""],"id":64},{"start":{"row":39,"column":0},"end":{"row":43,"column":38},"action":"insert","lines":["    # 修正: openai.OpenAIError を使用","    except openai.OpenAIError as e:","        return f\"OpenAI APIエラーが発生しました: {str(e)}\"","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\""]}],[{"start":{"row":39,"column":0},"end":{"row":39,"column":32},"action":"remove","lines":["    # 修正: openai.OpenAIError を使用"],"id":65},{"start":{"row":38,"column":21},"end":{"row":39,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":13,"column":63},"end":{"row":13,"column":64},"action":"remove","lines":["\""],"id":66},{"start":{"row":13,"column":62},"end":{"row":13,"column":63},"action":"remove","lines":["o"]},{"start":{"row":13,"column":61},"end":{"row":13,"column":62},"action":"remove","lines":["b"]},{"start":{"row":13,"column":60},"end":{"row":13,"column":61},"action":"remove","lines":["r"]},{"start":{"row":13,"column":59},"end":{"row":13,"column":60},"action":"remove","lines":["u"]},{"start":{"row":13,"column":58},"end":{"row":13,"column":59},"action":"remove","lines":["t"]},{"start":{"row":13,"column":57},"end":{"row":13,"column":58},"action":"remove","lines":["-"]},{"start":{"row":13,"column":56},"end":{"row":13,"column":57},"action":"remove","lines":["5"]},{"start":{"row":13,"column":55},"end":{"row":13,"column":56},"action":"remove","lines":["."]},{"start":{"row":13,"column":54},"end":{"row":13,"column":55},"action":"remove","lines":["3"]},{"start":{"row":13,"column":53},"end":{"row":13,"column":54},"action":"remove","lines":["-"]},{"start":{"row":13,"column":52},"end":{"row":13,"column":53},"action":"remove","lines":["t"]},{"start":{"row":13,"column":51},"end":{"row":13,"column":52},"action":"remove","lines":["p"]},{"start":{"row":13,"column":50},"end":{"row":13,"column":51},"action":"remove","lines":["g"]},{"start":{"row":13,"column":49},"end":{"row":13,"column":50},"action":"remove","lines":["\""]}],[{"start":{"row":13,"column":48},"end":{"row":13,"column":49},"action":"remove","lines":[" "],"id":67},{"start":{"row":13,"column":47},"end":{"row":13,"column":48},"action":"remove","lines":[","]}],[{"start":{"row":14,"column":66},"end":{"row":14,"column":72},"action":"remove","lines":[" \"0.7\""],"id":68},{"start":{"row":14,"column":65},"end":{"row":14,"column":66},"action":"remove","lines":[","]}],[{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\")  # デフォルトモデル","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\"))  # デフォルト温度","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPTでの応答生成","def search_index(faiss_index, query):","    try:","        # FAISSインデックスで検索","        results = faiss_index.similarity_search(query)","        content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","        # ChatGPTで応答を生成","        response = openai.ChatCompletion.create(","            model=OPENAI_API_MODEL,","            messages=[","                {\"role\": \"system\", \"content\": \"あなたは学生の質問に答えるアシスタントです。\"},","                {\"role\": \"user\", \"content\": f\"以下の資料に基づいて回答してください:\\n\\n{content}\\n\\n質問: {query}\"}","            ],","            temperature=OPENAI_API_TEMPERATURE","        )","        answer = response[\"choices\"][0][\"message\"][\"content\"].strip()","        return answer","    except openai.OpenAIError as e:","        return f\"OpenAI APIエラーが発生しました: {str(e)}\"","    except Exception as e:","        return f\"エラーが発生しました: {str(e)}\"","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    try:","        for filename in os.listdir(folder_path):","            file_path = os.path.join(folder_path, filename)","            if filename.endswith(\".pdf\"):","                documents = load_pdf(file_path)","            elif filename.endswith(\".txt\"):","                documents = load_text(file_path)","            elif filename.endswith(\".docx\"):  # Wordファイル対応","                documents = load_docx(file_path)","            else:","                continue","","            texts = split_text(documents)","            all_texts.extend(texts)","","        if not all_texts:","            raise ValueError(\"フォルダ内に有効なテキストが見つかりませんでした。\")","","        # return_documentsがTrueの場合、ドキュメントのリストを返す","        if return_documents:","            return all_texts","        # デフォルトではインデックスを返す","        return create_faiss_index(all_texts)","","    except Exception as e:","        print(f\"エラーが発生しました: {e}\")","        return None",""],"id":69},{"start":{"row":0,"column":0},"end":{"row":87,"column":0},"action":"insert","lines":["","import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\")","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\"))","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPT 4.0oでの応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPT 4.0oを使って応答を生成","    response = openai.ChatCompletion.create(","    model=OPENAI_API_MODEL,","    temperature=OPENAI_API_TEMPERATURE,","    messages=[","        {","            \"role\": \"system\",","            \"content\": (","                # 学生の質問やコメントに対する基本的な役割とアプローチ","                \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                \"感謝の言葉などは必要ありません\"","                ","                # 講義の範囲を超えた質問に対する対応方法","                \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                \"感想が講義の範囲を超えている、また資料に直接関係のない場合は、「その感想は講義の範囲を超えているため、回答できません」と答えてください。\"","        ","                # 授業コメントへの反応の方針","                \"授業に関するコメントに対しては、その内容に基づいて適切に反応し、学生が持っている印象や興味を引き出す回答を提供してください。\"","                \"回答は、学生の学びや関心を深めるために、教育的かつ励ましのある内容であることが望ましいです。\"","        ","                # 不確定な情報に対する慎重な対応","                \"原則として提供した資料に基づいて回答してください．回答に必要な関連情報が不十分な場合には、ソフトウェア工学に関する一般的な知識を用いて補完しても構いません。\"","                \"推測に基づく不確定な情報の提供は行わないでください。\"","        ),","    },","        {","            \"role\": \"user\",","            \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\"","        }","    ]",")","","    answer = response['choices'][0]['message']['content'].strip()","    return answer","","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""]}],[{"start":{"row":29,"column":4},"end":{"row":29,"column":5},"action":"insert","lines":["c"],"id":70},{"start":{"row":29,"column":5},"end":{"row":29,"column":6},"action":"insert","lines":["h"]},{"start":{"row":29,"column":6},"end":{"row":29,"column":7},"action":"insert","lines":["a"]},{"start":{"row":29,"column":7},"end":{"row":29,"column":8},"action":"insert","lines":["t"]}],[{"start":{"row":29,"column":8},"end":{"row":29,"column":9},"action":"insert","lines":["g"],"id":71}],[{"start":{"row":29,"column":9},"end":{"row":29,"column":10},"action":"insert","lines":["p"],"id":72},{"start":{"row":29,"column":10},"end":{"row":29,"column":11},"action":"insert","lines":["t"]},{"start":{"row":29,"column":11},"end":{"row":29,"column":12},"action":"insert","lines":["_"]}],[{"start":{"row":29,"column":50},"end":{"row":29,"column":51},"action":"remove","lines":["e"],"id":74},{"start":{"row":29,"column":49},"end":{"row":29,"column":50},"action":"remove","lines":["t"]},{"start":{"row":29,"column":48},"end":{"row":29,"column":49},"action":"remove","lines":["a"]},{"start":{"row":29,"column":47},"end":{"row":29,"column":48},"action":"remove","lines":["e"]},{"start":{"row":29,"column":46},"end":{"row":29,"column":47},"action":"remove","lines":["r"]},{"start":{"row":29,"column":45},"end":{"row":29,"column":46},"action":"remove","lines":["c"]}],[{"start":{"row":29,"column":45},"end":{"row":29,"column":46},"action":"insert","lines":["c"],"id":75},{"start":{"row":29,"column":46},"end":{"row":29,"column":47},"action":"insert","lines":["h"]},{"start":{"row":29,"column":47},"end":{"row":29,"column":48},"action":"insert","lines":["a"]},{"start":{"row":29,"column":48},"end":{"row":29,"column":49},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":0},"end":{"row":87,"column":0},"action":"remove","lines":["","import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\")","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\"))","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPT 4.0oでの応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPT 4.0oを使って応答を生成","    chatgpt_response = openai.ChatCompletion.chat(","    model=OPENAI_API_MODEL,","    temperature=OPENAI_API_TEMPERATURE,","    messages=[","        {","            \"role\": \"system\",","            \"content\": (","                # 学生の質問やコメントに対する基本的な役割とアプローチ","                \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                \"感謝の言葉などは必要ありません\"","                ","                # 講義の範囲を超えた質問に対する対応方法","                \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                \"感想が講義の範囲を超えている、また資料に直接関係のない場合は、「その感想は講義の範囲を超えているため、回答できません」と答えてください。\"","        ","                # 授業コメントへの反応の方針","                \"授業に関するコメントに対しては、その内容に基づいて適切に反応し、学生が持っている印象や興味を引き出す回答を提供してください。\"","                \"回答は、学生の学びや関心を深めるために、教育的かつ励ましのある内容であることが望ましいです。\"","        ","                # 不確定な情報に対する慎重な対応","                \"原則として提供した資料に基づいて回答してください．回答に必要な関連情報が不十分な場合には、ソフトウェア工学に関する一般的な知識を用いて補完しても構いません。\"","                \"推測に基づく不確定な情報の提供は行わないでください。\"","        ),","    },","        {","            \"role\": \"user\",","            \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\"","        }","    ]",")","","    answer = response['choices'][0]['message']['content'].strip()","    return answer","","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""],"id":76},{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["","","import os","import openai","from dotenv import load_dotenv","from langchain.vectorstores import FAISS","from langchain.embeddings.openai import OpenAIEmbeddings","from file_loader import load_pdf, load_text, load_docx","from text_splitter import split_text","","# .envファイルの内容を読み込み","load_dotenv()","","# 環境変数からAPIキー、モデル、温度を取得","openai.api_key = os.getenv(\"OPENAI_API_KEY\")","OPENAI_API_MODEL = os.getenv(\"OPENAI_API_MODEL\")","OPENAI_API_TEMPERATURE = float(os.getenv(\"OPENAI_API_TEMPERATURE\"))","","# 埋め込みとインデックス作成","def create_faiss_index(texts):","    embeddings = OpenAIEmbeddings(api_key=openai.api_key)","    return FAISS.from_documents(texts, embeddings)","","# クエリ検索とChatGPT 4.0oでの応答生成","def search_index(faiss_index, query):","    # FAISSインデックスで検索","    results = faiss_index.similarity_search(query)","    content = results[0].page_content if results else \"該当する情報が資料内に見つかりませんでした。\"","","    # ChatGPT 4.0oを使って応答を生成","    chatgpt_response = openai.chat.completions.create(","    model=OPENAI_API_MODEL,","    temperature=OPENAI_API_TEMPERATURE,","    messages=[","        {","            \"role\": \"system\",","            \"content\": (","                # 学生の質問やコメントに対する基本的な役割とアプローチ","                \"あなたは学生の質問や授業に関するコメントに対して、提供された講義資料と参考例を基に講義の範囲に基づいて正確で簡潔な回答を行うアシスタントです。\"","                \"質問、コメントに対しては、基本的に丁寧語で回答してください。\"","                \"感謝の言葉などは必要ありません\"","                ","                # 講義の範囲を超えた質問に対する対応方法","                \"質問が講義の範囲を超えている、また資料に直接関係のない場合は、「その質問は講義の範囲を超えているため、回答できません」と答えてください。\"","                \"感想が講義の範囲を超えている、また資料に直接関係のない場合は、「その感想は講義の範囲を超えているため、回答できません」と答えてください。\"","        ","                # 授業コメントへの反応の方針","                \"授業に関するコメントに対しては、その内容に基づいて適切に反応し、学生が持っている印象や興味を引き出す回答を提供してください。\"","                \"回答は、学生の学びや関心を深めるために、教育的かつ励ましのある内容であることが望ましいです。\"","        ","                # 不確定な情報に対する慎重な対応","                \"原則として提供した資料に基づいて回答してください．回答に必要な関連情報が不十分な場合には、ソフトウェア工学に関する一般的な知識を用いて補完しても構いません。\"","                \"推測に基づく不確定な情報の提供は行わないでください。\"","        ),","    },","        {","            \"role\": \"user\",","            \"content\": f\"以下の資料に基づいて回答してください。資料に関係がない質問には回答しないでください:\\n\\n{content}\\n\\n質問: {query}\"","        }","    ]",")","","    answer = chatgpt_response.choices[0].message.content","    return answer","","","# フォルダ内のすべてのPDFおよびテキストファイルを読み込んでインデックスを作成","def load_and_index_folder(folder_path, return_documents=False):","    all_texts = []","    for filename in os.listdir(folder_path):","        file_path = os.path.join(folder_path, filename)","        if filename.endswith(\".pdf\"):","            documents = load_pdf(file_path)","        elif filename.endswith(\".txt\"):","            documents = load_text(file_path)","        elif filename.endswith(\".docx\"):  # Wordファイル対応","            documents = load_docx(file_path)","        else:","            continue","","        texts = split_text(documents)","        all_texts.extend(texts)","","    # return_documentsがTrueの場合、ドキュメントのリストを返す","    if return_documents:","        return all_texts","    # デフォルトではインデックスを返す","    return create_faiss_index(all_texts)",""]}],[{"start":{"row":40,"column":33},"end":{"row":41,"column":0},"action":"insert","lines":["",""],"id":77},{"start":{"row":41,"column":0},"end":{"row":41,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":41,"column":16},"end":{"row":41,"column":18},"action":"insert","lines":["\"\""],"id":78}],[{"start":{"row":41,"column":17},"end":{"row":41,"column":19},"action":"insert","lines":["先生"],"id":79},{"start":{"row":41,"column":19},"end":{"row":41,"column":22},"action":"insert","lines":["の回答"]}],[{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"insert","lines":[":"],"id":80}],[{"start":{"row":41,"column":23},"end":{"row":42,"column":0},"action":"insert","lines":["",""],"id":81},{"start":{"row":42,"column":0},"end":{"row":42,"column":20},"action":"insert","lines":["                    "]}],[{"start":{"row":42,"column":16},"end":{"row":42,"column":20},"action":"remove","lines":["    "],"id":82},{"start":{"row":42,"column":12},"end":{"row":42,"column":16},"action":"remove","lines":["    "]},{"start":{"row":42,"column":8},"end":{"row":42,"column":12},"action":"remove","lines":["    "]},{"start":{"row":42,"column":4},"end":{"row":42,"column":8},"action":"remove","lines":["    "]},{"start":{"row":42,"column":0},"end":{"row":42,"column":4},"action":"remove","lines":["    "]},{"start":{"row":41,"column":23},"end":{"row":42,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":41,"column":23},"end":{"row":41,"column":34},"action":"insert","lines":["の部分も必要ありません"],"id":83}]]},"ace":{"folds":[],"scrolltop":549.2,"scrollleft":0,"selection":{"start":{"row":41,"column":24},"end":{"row":41,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":53,"state":"start","mode":"ace/mode/python"}},"timestamp":1734527688938,"hash":"5c0bca03c9be46fad0d74c93758f274c556dd2a7"}