それでは、これからソフトウェア工学の授業を始めたいと思います。今日は初回なので、ソフトウェア工学の目的から、生成AIによるソフトウェア開発の自動化、DX推進スキル標準、情報処理技術者試験といった基本的な事項についてお話しします。また、そもそもソフトウェア工学とは何かという話を中心にお話ししたいと考えています。

昨年度まで、ソフトウェア工学は三年生向けの科目でしたが、今年から二年生も受講できるようにしました。ソフトウェア工学の知識を持っていると、プログラミング概論演習ⅡやⅢ、二年生後期の情報システム実験などを学ぶ上で非常に役に立つと思います。三年生に上がると、プログラミングガイド演習ⅢでJavaプログラミングを学びます。また、後期には情報ネットワーク工学コースの人向けに大槻先生のソフトウェア共同開発実験があります。この授業で学んだことは、他の授業でも引き続き活用できるでしょう。

それでは早速、授業に入っていきたいと思いますが、今日は初回でもありますので、全体的なイントロから始めていきたいと考えています。まず教科書についてですが、使用しないことにしました。その代わりに講義資料を配布します。講義資料や関連する資料はすべて講義のホームページからダウンロードできるようにしてあります。そのため、必ず講義ホームページに登録しておいてください。ホームページのURLや登録キーは、開講通知で既にお知らせしているかと思います。

講義シラバスは講義ホームページからリンクされています。今年度のソフトウェア工学では、大規模なソフトウェア製品を系統的に開発するために、ソフトウェアのライフサイクルモデルを学びます。このモデルを通じて、計画を立てることの重要性を理解することが求められます。また、ライフサイクルにおける様々な技術、例えばユースケース、オブジェクト指向、アジャイル、段階的詳細化、構造化プログラミング、DevOps、テスト技法なども紹介していきます。

これらの技術は、将来的にソフトウェア開発技術者になる方向に進む学生にとって重要なものです。また、システム開発を自分で行わない場合でも、ソフトウェア開発を委託する側にとっても必須の技術です。そのため、情報ネットワーク工学コースの必修科目にしてありますが、情報システム工学コースの学生も重要な科目としてぜひ受講してほしいと考えています。

この授業では、プログラミング演習Ⅲやソフトウェア共同開発実験と連携し、様々な技術を学びます。また、プログラミングガイド演習Ⅱや情報システム実験とも連動しています。
この授業は、二年後期の他の科目とも関連が深いため、今年から二年生の講義科目として開講しています。この授業で学んだことは、他の実験や演習、さらには卒業研究や就職後に活用してもらいたいと考えています。様々な分野における情報システムの活用事例などを通じて、ソフトウェア工学分野の知識を系統的に教えていきます。また、仕様書の作成やソフトウェアの基本設計などは、二回のPC練習で実施する予定です。

授業計画にある通り、今日はソフトウェア工学とは何かについてお話しします。その後、プロセスモデルの話が二回続きます。ここで、ソフトウェア開発の全体像を説明しますが、特にアジャイルやスクラムが最近注目されています。第3回の授業では、プロセスモデルについて詳しく説明し、ソフトウェア開発の全体像を理解してもらいます。

ソフトウェア開発は、仕様策定から始まり、基本設計、詳細設計、コーディング、ソフトウェアテストの順に進みます。事業の都合上、実行順序とは逆に説明しますが、それぞれの工程について詳しく説明していきたいと思います。一番最後には、プロジェクト管理やコストモデルについてまとめてお話しします。これはソフトウェア開発全体に関わる技術です。

PC練習は2回あり、一つはユースケース演習、第12週に実施します。もう一つはオブジェクト指向演習で、第9週に行います。しばらく先の話ですが、これらの演習課題が出てくることを覚えておいてください。授業で出される復習課題が20%、定期試験が40%を占め、これらを総合して100点満点で評価します。

参考資料は多くありますが、最近ではChatGPTをはじめとする生成AIが注目されています。この技術はソフトウェア開発を効率化する上で非常に重要ですので、今日の授業でも少し触れる予定です。

今日はソフトウェア工学の必要性を理解してもらうために、まずは情報システムの事例やソフトウェアの基本的性質についてお話しします。この知識や技術は、ソフトウェアを開発する人や開発を委託する人にとって必須のものです。

ITスキル標準に代わり、現在ではDXスキル標準が登場しています。これについても少し紹介します。また、こうしたスキルを証明する手段として、情報処理技術者試験などの資格試験が使われています。この試験は就職にも役立つため、ぜひ挑戦してもらいたいと考えています。ただし、合格にはしっかりとした準備が必要ですので、試験に役立つ情報もお伝えします。
まず、様々なIT職種について話したいと思います。情報技術者やキャリアデザインを学んでいる人は、授業や練習課題を通じて調べたり、学んだりしているかと思いますが、履修していない人もいるのではないかと思います。そういった人たちに向けて、読んでほしい資料がありますので、少し紹介したいと思います。

さて、今の世の中、情報システムと名のつくものは、ありとあらゆるところに存在しています。例えば、ヤフーやグーグルのようなポータルサイト、銀行のオンラインシステム、株式や証券のオンライン売買システム、佐賀大学の電子図書館、特許の出願が電子図書館で公開されるシステムなどが挙げられます。さらに、大学では入試、教務、財務会計システムがあり、病院では医療情報システムや電子カルテが利用されています。これらはすべて、情報システムが不可欠な例です。

また、コンビニに行けばPOSシステムがあります。商品を購入するとバーコードを読み取って支払いを行いますが、その瞬間にコンビニ側はどの商品が、いつ、どの値段で売れたかをリアルタイムで把握できます。これにより、売れている商品を分析し、次に仕入れる商品を考えることができるのです。

電子商取引やネットショップ、ネットオークション、電子マネー、暗号通貨、動画サイトなども広く普及しています。政府や地方自治体でも、情報システムがないと運営が成り立たない状況です。たとえば、電子政府や電子県庁、電子市役所などのシステムが整備されています。

さらに、SNSや情報サイト、Netflix、インスタグラム、モバゲー、GREE、掲示板なども存在し、多くの人がスマートフォンを持っています。スマートフォンは、かつては携帯電話と呼ばれていましたが、今では電話としての使用が珍しくなりつつあります。

また、テレビも進化しており、Netflixを視聴したり、ゲームをしたりできるものもあります。オーディオも、かつての大型スピーカーやアンプから、手のひらサイズやポケットに入るサイズに変わりつつあります。

さらに、車や家電製品、冷蔵庫、電子レンジ、洗濯機などにも情報システムやソフトウェアが組み込まれています。交通機関も同様です。私たちの身の回りを見渡せば、目に入るものの多くに情報システムやソフトウェアが組み込まれていることがわかります。

大阪大学では、LiveCampusというシステムがあり、履修届の提出や成績確認、就職活動やインターンの際の証明書発行などで利用されています。教員は成績入力や履修者名簿の確認、カリキュラム管理、オンラインシラバスの管理、卒業判定、教員免許の判定などに使用しています。このように、非常に多様な目的のために、LiveCampusのような業務情報システムが使われているのです。
こうした業務情報システムを運用するためには、さまざまなデータを管理する必要があります。例えば、皆さんに連絡を取るためには、学籍番号や氏名だけでなく、住所や帰省先、携帯電話の番号などの情報が必要です。同様に、教員についても、科目や開講科目の情報、時間割のデータ、履修届のデータなどを持っていなければ、誰がどの科目を履修しているのかがわからなくなります。また、成績データや卒業要件データを持っていないと、誰がどの科目でどのような成績を取ったのか、卒業させてよいかどうかも判断できなくなってしまいます。

これらのデータを一元管理するために、こうしたシステムが必要です。皆さんは2年生のときに、データベースの授業を受けたはずです。データベースは、今の情報システムにおいて絶対に必要な基盤技術となっています。そのため、情報システム実験のようにデータベースを活用してさまざまなアプリケーションを開発することが求められるのです。

これはアマゾンのオンラインショップの例です。アマゾンのページを開くと、このような画面が表示されますが、実際にアマゾンの倉庫を見ると、通常の店舗と違い、ショーウィンドーに商品を並べる必要がありません。その代わり、倉庫に大量の商品が蓄積されています。商品を取り出す作業はすべてロボットに任せており、人手で作業をするのは広すぎる倉庫では非効率だからです。

このシステムでは、例えばスマホからホームページを開いて注文を出すと、その注文がアマゾンに伝わり、倉庫や工場に連絡が行きます。倉庫に商品がある場合、それを皆さんの住所まで届けることが行われますが、商品を届けるだけでは終わりません。金融機関から代金の請求を行い、クレジットカードで支払うか、銀行振り込みで代金を受け取る必要があります。

アマゾンのようなネットショップから見れば、皆さんが何を注文したかだけでなく、金融機関の情報やクレジットカード番号、配達先の住所など、個人情報を多く持っていることになります。このような個人情報を活用することで、個々に合わせたサービスを提供できます。例えば、どの商品を検索したかを分析すれば、その人がどの商品に興味を持っているかがわかるというわけです。

ネットショップはさまざまなデータを収集し、それを分析することで現状を把握し、より良い製品やサービスを提供するために活用しています。このような全体の流れを司っているのがデータサイエンスの技術です。データサイエンスは、アマゾンのようなショップだけでなく、銀行、交通機関、病院、学校、役所など、さまざまな場所で使われています。それほど重要な技術です。

このように、情報システムは皆さんの身近にたくさん存在していることがわかるかと思います。情報システムは基本的に次のような構成になっています。まず、ハードウェアのレイヤーとして、論理回路、IC、LSIなどがあり、現在はBLSIの時代になっています。これらの基本的なハードウェアを組み合わせて、CPU、入出力装置、記憶装置、ネットワークなどのアーキテクチャが構築されます。

ここまでがハードウェアのレイヤーです。

その上に、Windowsなどのオペレーティングシステム（OS）が存在します。最近のオペレーティングシステムには、情報ネットワークの機能も組み込まれており、さらに高度なOSではデータベースの機能も統合されています。これらのサービスはミドルウェアと呼ばれます。ミドルウェアとは、複数のアプリケーションソフトウェアが共通に利用する機能を提供するもので、共通の概念や機能をソフトウェアとして提供します。

皆さんが直接使用するのは、WordやExcel、PowerPoint、Python、C++などの個別のアプリケーションソフトです。しかし、これらのアプリケーションソフトの中で共通に使う機能、例えば「ファイル」や「ユーザー」という概念は、ミドルウェアによって提供されます。オペレーティングシステムなら、ファイル、ユーザー、メモリー、仮想記憶といった概念・機能を提供し、データベース管理システムではデータの操作と管理機能が提供されます。情報ネットワークでは、インターネットへの接続やデータの送受信機能が提供されています。

こうして、個別のアプリケーションソフトは共通機能をミドルウェアに任せ、それ以外の部分だけを開発すればよいので、合理的です。共通機能まで含めてアプリケーションを作るとなると、同じ機能を何度も作ることになり、大変な手間がかかります。

さて、ここで「ソフトウェア」とは何かについて少し説明しておきたいと思います。皆さんがイメージしているソフトウェアは、コンピューターのハードウェアを効率よく活用するためのプログラムだと思っているかもしれません。しかし、実際のソフトウェアはもっと広い意味を持っています。具体的には、目的とされる機能やサービスをハードウェアで実現するための応用技術全般を指します。つまり、ソフトウェアはプログラムだけではありません。

具体的には、プログラムを作成し、それを使い続けるためのさまざまなドキュメントや技法、方法論が含まれます。ソフトウェアには、オペレーションマニュアルやユーザーマニュアル、運用手引書、テストドキュメント、モジュール設計やデータ構造、ユーザーインターフェース設計を示したドキュメント、仕様書など、さまざまなドキュメントが伴います。

また、ソフトウェア開発や運用を行う人々の技能や経験、アイデア、ノウハウも重要です。ソフトウェアは、単なるプログラムの集合体ではなく、さまざまなレベルのレイヤーで構成されたシステムです。情報システムを実現するためには、要求定義、システム設計、プログラム設計、テストといった手順が必要で、それらには合理的な手順が存在します。ソフトウェア工学の授業では、これらの手順に重点を置いて教えています。

ソフトウェアには特殊な性質があります。情報システムはハードウェアとソフトウェアで構成されていますが、OSやネットワークのようなミドルウェア部分は、他の開発者が開発し、それを利用してアプリケーションソフトウェアが開発されます。それにも関わらず、情報システムの開発コストの90%以上はソフトウェア開発にかかっており、自動化が難しい技術です。ソフトウェア開発コストが非常に高いのです。

たとえば、1000万円規模のソフトウェアは、ソフトウェア工学の世界では小規模とされています。では、大規模ソフトウェアとはどのくらいの規模かと言うと、最低でも百億円規模、少し大きめのものだと1000億円を超える規模になります。

例えば、WindowsやオープンAIが開発したGPTなどのソフトウェアは、百億円では到底作れない規模のものです。なぜこれほど開発コストが高いのかというと、仕事で使用されるソフトウェアには責任が伴うからです。ソフトウェアの欠陥やバグが発生すると、大きな問題を引き起こす可能性があります。そのため、バグが許されないわけです。

さらに、ソフトウェアを開発する人と実際に使う人は通常異なります。例えば、皆さんが使っているWindowsのユーザーである一方で、Windowsを開発したのはマイクロソフトです。そのため、開発者にとって当たり前のことでも、ユーザーにはわかりません。例えば、Windowsの内部構造がどうなっているのか、どのような機能があるのか、ユーザーに対して十分な説明文書やサポートが必要となります。また、安定した運用が求められ、システムがダウンしたり、不具合が発生したりすることは避けなければなりません。

実際にソフトウェアの欠陥やトラブルが起こると、重大な問題が発生することがあります。例えば、2012年の6月に発生したレンタルサーバーの障害では、通常はバックアップデータから復旧できるはずのデータがすべて消失し、復旧不可能となりました。この事件は「ファーストサーバー事件」として知られています。また、2005年に発生した東京証券取引所の誤発注事件では、株の売買注文の際に価格と数量が誤って入力され、株が異常な安値で大量に売りに出されるというトラブルが発生しました。

さらに、アメリカでは、軍用ハイテク航空機がシステムトラブルによって墜落し、大きな損害が発生しました。1986年には、放射線照射のミスにより人命が失われる事件も発生しています。このように、ソフトウェアの欠陥や不具合が原因で、人命や財産、重要な情報が失われるといった重大な事故が起きています。これらは重大案件ですが、軽いトラブルも含めると、日常的にソフトウェアの問題は発生しているのです。これらの問題を避けるため、ソフトウェアの開発には非常に高いコストがかかるわけです。

しかし、ソフトウェア開発のほとんどは人手で行われているため、これらのトラブルを完全に防ぐのは難しいのが現実です。皆さんも一年生のときのコンピュータソフトウェアや、二年生で学んだプログラミングガイド演習でプログラミングを勉強しましたが、基本的に手作業での開発となります。ただ、最近では少し変わってきている部分もあります。

最近では、AIが登場し、ソフトウェア開発の方法が変わりつつあります。しかし、ソフトウェア開発に人手が必要であるという点は、依然として大きくは変わっていません。また、非常に大規模なソフトウェアが多く存在します。次のスライドでお話ししますが、1万行程度のソフトウェアはまだ小規模です。何十万行、何百万行といった規模のソフトウェアが当たり前のように存在しています。

なぜこれほど大規模なソフトウェアが必要になるのかというと、ハードウェアの性能が向上し、メモリーも大きくなっているため、人々のソフトウェアに対する要求がどんどん高くなっているからです。その結果、昔の機能を保持したまま、さらに多くの機能を追加する必要が出てきており、ソフトウェアの規模がどんどん膨れ上がっているのです。

しかし、一人のプログラマーが詳細を把握できるソースコードの行数は、たかだか1万行程度であると言われています。これは認知心理学的にも、人間の理解能力の限界とされています。どんなに頭の良い人でも、この限界を超えることはできません。

それにもかかわらず、現代のソフトウェアは何十万行、何百万行といった規模になっています。では、どうやってこれらの大規模ソフトウェアを作るのかというと、チームを組んで、役割分担をしながら開発するのです。各人の担当範囲が1万行を超えないように分担し、チームでシステム開発を進めます。そのため、モジュール設計、アルゴリズム設計、プログラミング、テスト、運用といった工程を異なる担当者が実施します。

しかし、担当者間で情報や意図を正しく伝えないと、バグが発生した場合にそれを復旧できなくなる可能性があります。これが問題です。

2006年のデータによると、例えば第三世代携帯電話のソフトウェアは500万行、カーナビは300万行、Windowsは数千万行の規模です。2015年の1月にGoogleのレポートによると、Googleが提供しているサービス全体で20億行のコードがあると言われています。また、日本のITプロジェクトの規模では、中央値が4万行程度、最大では200万行を超えるものもあります。このように、現代のソフトウェアは非常に大規模であり、一人のプログラマーが把握できる行数を遥かに超えています。

こうした人間の能力の限界を突破するような規模のソフトウェアを作るためには、どうすればよいのか？ これがソフトウェア工学の授業で取り扱うテーマです。簡単に言うと、分業が必要になりますが、正しい分業の仕方があります。これについて詳しく話していきたいと思います。

ソフトウェア開発には専門知識が必要です。最近ではAIがプログラミングを代行することもありますが、そのAIに指示を出すためには専門知識が求められます。つまり、専門知識がなければ、上手くいかないのです。皆さんが学んでいる専門教育の知識は、こうした場面で活用されます。

もちろん、専門知識だけでは不十分で、構築対象の業務やビジネスに関する知識も必要です。例えば、入試のプログラムを作ろうと思ったら、入試業務を理解していなければなりません。また、サッカーに関するプログラムを作ろうと思ったら、サッカーのルールや戦略を知らなければなりません。

こうした背景から、構築対象の業務や、ビジネスにおける収益構造についても理解しておく必要があります。専門知識が不可欠であり、専門技術者として十分な能力があれば、年間で1000万円ほどの収入を得ることも可能です。

ソフトウェア開発は、多くの技術者を雇用して行われるため、開発費用は非常に高額になります。例えば、銀行のオンラインシステムの開発には、100億円以上の費用がかかることがあります。また、セブンイレブンのPOSシステムは、5年から6年ごとに更新されますが、その際には600億円もの開発費用がかかると言われています。

このように数百億円規模の開発費用がかかる場合、費用を正確に見積もることが非常に重要です。見積もりが甘く、予算が大幅に超過することは、民間企業にとって致命的です。そのため、ソフトウェア開発費用をできるだけ抑えることが求められます。既存のソフトウェアを再利用し、新たな開発を最小限に抑えることが重要です。

系統的なソフトウェア開発を行うことで、開発費用や期間を正確に見積もることができ、計画的に高品質なソフトウェアを開発することが可能になります。ソフトウェア開発コストを下げるためには、変更を容易にしたり、バグの発見や修正が簡単にできるようにすることが重要です。また、一度作成したソフトウェアを再利用することができれば、それに越したことはありません。このように、ソフトウェアの再利用性も非常に重要な要素となります。

これらの点について学ぶのが、ソフトウェア工学です。最近では、特に生成AIがソフトウェア工学に大きな影響を与えています。日本のAI研究の第一人者である東大の松尾豊先生も、昨年末にChatGPTが登場して以来、その注目度が高まっていると述べていますが、研究者の間ではもっと以前から話題となっていました。

AI、特にChatGPTの活用により、情報の抽出や文脈の理解、分類やチェック、文書生成、さらにはプログラミングの代行など、多くのタスクが可能になりました。従来から可能だったタスクの精度が向上し、以前は不可能だった新たなタスクも実現しています。

これからは、プログラミングを必ずしも人間が行うとは限らなくなる時代が来るかもしれません。しかし、AIを利用する際にはいくつかの注意点があります。まず、機密情報や個人情報を入力すると、それが流出するリスクがあります。また、AIが提供する回答が必ずしも正確ではないため、注意が必要です。さらに、AIが誤った情報を提供しても、責任を取ってくれない点も注意すべきです。

また、ChatGPTなどのAIは出典を示さないため、情報の信頼性を確認するのが難しい場合があります。出典を示すAIも存在するため、今後は改善が期待されますが、現時点ではこうしたリスクがあることを理解しておく必要があります。

今後、ソフトウェア開発の方法が根本的に変わる可能性があります。これまで人間が行っていたコーディングの多くをAIが担うようになるからです。人間はまず、AIにコード生成の指示を出し、実際にコードを生成するのはAIです。その後、人間は生成されたコードをコンパイルして、エラーがないかを確認します。もしコンパイルエラーが発生した場合は、修正の指示を出し、AIがその修正を行います。コンパイルが成功したら、次に実行結果を確認し、問題があれば再度修正指示を出します。実際に修正を行うのもAIです。このように、人間とAIが協力してプログラムを作り上げていく形になります。

これにより、人間の役割は根本的に変わります。人間はプログラマーではなく、AIに指示を出し、AIが作ったプログラムを点検する役割を担うことになります。そのため、正しい指示を出すことと、AIの出力結果を鵜呑みにせず、間違いがあれば修正する能力が求められます。

また、マイクロソフトは最近、Microsoft 365の「Copilot」というAI機能をリリースしました。このAIを活用することで、Office製品の能力を100%引き出すことを目指しています。多くの人が、WordやExcelなどのOffice製品を10%から15%程度しか活用していないと言われていますが、AIを活用することで、例えばマクロの作成など、より高度な機能も利用できるようになります。AIはユーザーの傍らにいる支援者として、文書作成やプレゼンテーション作成、議事録の作成など、さまざまなシーンでサポートしてくれます。

このように、生成AIの活用により、システム開発やオフィス業務に革命が起こると考えられています。たとえば、ソフトウェア開発においては、ChatGPTが活用できるかというテーマでYouTube動画が作られています。この動画は、同じ名前の本の著者による紹介動画で、非常に興味深い内容となっています。授業の時間内で再生することは難しいので、後でご自宅で視聴していただければと思います。

生成AIの活用により、自動化できるタスクが数多く登場する可能性があります。ソフトウェア工学の授業では、こうした前提を踏まえ、皆さんに学んでほしい内容をスライド50で示しています。具体的には、仕様策定、基本設計、詳細設計、そしてテストに焦点を当てて学んでいただきます。

詳細設計では、データ構造とアルゴリズムについてすでに学んでいると思いますが、ソフトウェア工学では、よりシンプルなアルゴリズムの作り方を教える予定です。また、プログラミングガイド演習ではコーディングについて学んでいるかと思いますが、今後はAIが自動生成するようになり、皆さんはAIに指示を出すスタイルに変わっていくと考えています。そのため、AIを使ったコーディングについても触れていきたいと思います。

その他、AIを使ってテストを行ったり、仕様策定の段階でAIを活用する方法など、さまざまな話題を取り入れていく予定です。次週からは、プロセスモデルを通じてソフトウェア開発工程について学びます。また、ソフトウェア設計の基本技術として、構造化とオブジェクト指向を取り上げますが、最近ではオブジェクト指向がよく使われているため、こちらを中心に教えていきます。

情報モデルとしては、データベースや情報システム実験でリレーショナルモデルを学びますが、それ以外の部分についてはERモデルなどを中心に説明する予定です。他の授業では教えていないモデルについては、しっかりと時間をかけて教えていきます。

このあたりの方法論、テスト技法、プロジェクト管理についても、他の授業ではあまり教えられていない範囲ですので、しっかりと教えていきたいと考えています。ソフトウェア工学で教える内容は多岐にわたりますが、皆さんが今後システム開発を上手く進めるために重要な知識をたくさん学んでいただきます。

これらの知識をしっかりと身につけておくことで、AIに対して正しい指示を出し、さまざまな作業を自動化することができるようになるでしょう。

さて、ここからはソフトウェア技術者についての話をしていきたいと思います。最近では生成AIなども登場していますが、昨年の12月に経済産業省とIPA（情報処理推進機構）が「DX推進スキル標準」を発表しました。この中で、今後重要と認識されている人材像として、ビジネスアーキテクト、デザイナー、ソフトウェアエンジニア、サイバーセキュリティ専門家、データサイエンティストなどが挙げられています。

このソフトウェア工学の授業では、特にソフトウェアエンジニアに焦点を当てていきますが、デザイナーやビジネスアーキテクトの仕事にも部分的に触れていくことになるでしょう。

ソフトウェアエンジニアの役割は、デジタル技術を活用したサービスを提供するためのソフトウェアを開発することです。インターフェースの機能実現やサーバーサイドの機能実現、開発・運用環境の最適化、信頼性の向上、現実世界のデジタル化など、さまざまな範囲を担当することになります。このように、ソフトウェアに関連する広範な仕事がソフトウェアエンジニアの役割となっています。

ソフトウェア工学を学ぶことで、特にソフトウェアエンジニアとして必要な知識を得ることができますが、他の人材類型にとっても重要な知識となります。ソフトウェア開発をしない技術者はほとんどいないため、どの人材類型であってもソフトウェア工学の知識は重要です。

次に、DX推進人材として必要な能力を証明するツールとして位置づけられているのが、情報処理技術者試験です。最も基本的な試験が「ITパスポート試験」で、これはレベル1の試験に該当します。さらに、IT技術者としての基本的な知識を問う「基本情報技術者試験」があり、これがレベル2です。レベルが上がると「応用情報技術者試験」があり、この試験に合格すれば、ソフトウェア技術者として一人前と見なされます。さらに上のレベル4では、専門家としての資格を取得することができる試験もあります。

セキュリティに関しては、レベル2の「情報セキュリティマネジメント試験」、レベル4の「情報処理安全確保支援士（登録セキュリティスペシャリスト）」などがあります。これらの試験を目指すことで、将来の就職時に強力な武器となるでしょう。

情報処理技術者試験の各レベルの違いについても説明します。レベル1は新入社員レベルで、上司の指導のもと業務をこなすことができるレベルです。入社後、一定の経験を積んで独力で業務を遂行できるようになると、レベル2に該当します。レベル3は応用情報技術者レベルで、指導を受けることなく独力で業務を遂行できる段階、いわゆる社会人として一人前と見なされるレベルです。

一方、レベル4の人材はどういう人かというと、自分で業務を遂行できるだけでなく、他の人を指導できることが求められます。つまり、今度は自分が指導する側に回るということです。先ほど述べた情報処理技術者試験で、レベル3が一人前、レベル4が専門家とされる理由は、この「他の人を指導できるかどうか」が大きな違いとなっているからです。

このように、情報処理技術者試験にはさまざまな試験カテゴリーが存在します。ITパスポート試験、基本情報技術者試験、応用情報技術者試験から高度試験まで、過去問題をこちらのURLから利用することができます。佐賀大学の学生であれば、誰でも無料でこのコースに登録し、これらの試験の過去問に自由にアクセスできます。もちろん、自動採点も行われますので、このシステムを活用して、試験対策を進めてください。

皆さんには、ぜひ過去問を解いて、どのような問題が出題されるのか、どの程度の難易度かを事前に把握したうえで、本番試験に臨んでいただきたいと思います。

さて、今日の授業はこれでほぼ終わりになりますが、授業終了前にいくつか連絡事項をお伝えしておきます。まず、講義ホームページに必ず登録をしておいてください。登録をしていないと、講義資料などを閲覧することができません。また、このホームページを通じて、Zoomミーティングに参加し、出席を取ることができます。

現在は掲載されていませんが、講義ビデオは毎回講義の後にホームページにアップロードされます。たとえば、体調不良で授業を欠席した場合でも、後でその回のビデオを視聴することができます。また、授業に関するコメントや感想をZoomのチャットに書き込んでから退室するようにしてください。これにより、皆さんがどの程度理解したかを把握し、授業を改善するための意見があれば、それも取り入れていきたいと考えています。

「明日をつくるIT技術者」という資料も、講義ホームページに掲載されています。これに目を通し、小テストに取り組んでください。この小テストは、次回の授業開始前、13時までに完了させるようお願いします。

最後に、LiveCampusでの履修登録を忘れずに行ってください。これを忘れると単位が取得できませんので、十分注意してください。講義ホームページをお気に入りに登録しておくと、ログインが簡単にできて便利です。

以上で、今日の授業を終わりにしたいと思います。